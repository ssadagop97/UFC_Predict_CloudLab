# -*- coding: utf-8 -*-
"""ufc_pred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QFHzJTJsVvjl-B6vQQ14aaBnWWFTD1h4
"""

import pandas as pd
from sklearn.neural_network import MLPClassifier  # simple lightweight deep learning
import numpy as np
import os
import plotly.graph_objs as go
import requests
# Libraries used for Section 2

# Section 1: Data loading and Machine Learning.
# Make sure Machine Learning only run once

# New fighters db data feed from morph.io
# We're always asking for json because it's the easiest to deal with
# morph_api_url = "https://api.morph.io/jasonchanhku/ufc_fighters_db/data.json"

# # Keep this key secret!
# morph_api_key = <insert key here>

# r = requests.get(morph_api_url, params={
#   'key': morph_api_key,
#   'query': "select * from data"
# })

# j = r.json()

fighters_db = pd.read_csv('UFC_Fighters_Database.csv')

# New fights db feed from morph.io
# We're always asking for json because it's the easiest to deal with
# morph_api_url_1 = "https://api.morph.io/jasonchanhku/ufc_fights_db/data.json"

# r_1 = requests.get(morph_api_url_1, params={
#   'key': morph_api_key,
#   'query': "select * from data"
# })

# j_1 = r_1.json()

fights_db = pd.read_csv('Cleansed_Data.csv')
fights_db = fights_db.dropna()

fighters = fighters_db['NAME']

# Manual sorting
weightclass = ['strawweight', 'flyweight', 'bantamweight', 'featherweight', 'lightweight', 'welterweight',
               'middleweight', 'lightheavyweight', 'heavyweight']

best_cols = ['SLPM_delta', 'SAPM_delta', 'STRD_delta', 'TD_delta', 'Odds_delta']

all_X = fights_db[best_cols]
all_y = fights_db['Label']

# This was the best model identified in the ipynb documentation
mlp = MLPClassifier(activation='tanh', alpha=0.0001, batch_size='auto', beta_1=0.9,
                    beta_2=0.999, early_stopping=False, epsilon=1e-08,
                    hidden_layer_sizes=(5, 5), learning_rate='constant',
                    learning_rate_init=0.001, max_iter=200, momentum=0.9,
                    nesterovs_momentum=True, power_t=0.5, random_state=1, shuffle=True,
                    solver='adam', tol=0.0001, validation_fraction=0.1, verbose=False,
                    warm_start=False)

mlp.fit(all_X, all_y)
def predict_outcome(data):
    prediction = mlp.predict_proba(data.reshape(1, -1))

    return prediction
import pickle
# Dumping the model object to save it as model.pkl file
pickle.dump(model,open('mlp.pkl','wb+'))

fights_db.to_csv('Cleansed_Data.csv')
fighters_db.to_csv('UFC_Fighters_Database')

