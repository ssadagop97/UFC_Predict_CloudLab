# -*- coding: utf-8 -*-
"""Neural Network - basemodel (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QFHzJTJsVvjl-B6vQQ14aaBnWWFTD1h4
"""

import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import StratifiedKFold
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
import datetime
from sklearn.preprocessing import LabelEncoder
import pandas as pd
from sklearn.model_selection import train_test_split
from multiprocessing import Queue

df = pd.read_csv("Modeldata.csv")
df1 = df.copy()
df=df.drop(['winner'], axis=1)
features = df.columns
# import labelencoder
x# instantiate labelencoder object
le = LabelEncoder()
df_y = pd.DataFrame(df1['winner'])
# Categorical boolean mask
categorical_feature_mask = df_y.dtypes==object
# filter categorical columns using mask and turn it into a list
categorical_cols = df_y.columns[categorical_feature_mask].tolist()
# apply le on categorical feature columns
#df1[categorical_cols] = df1[categorical_cols].apply(lambda col: le.fit_transform(col))
X_all = df[features]
y_all =df1['winner']
X_train, X_test, Y_train, Y_test = train_test_split(X_all, y_all, test_size=0.2, random_state=0)

# baseline model
def create_baseline():
# create model
    model = Sequential()
    model.add(Dense(887, input_dim=41, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
# Compile model
    model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
    return model

def create_model():
  return tf.keras.models.Sequential([
        tf.keras.layers.Dense(168, input_dim=168,activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(10, activation='softmax')
  ])

log_dir = "logs/fit/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
#log_dir = "logs/fit/" +"events.out.tfevents.1587536516.LAPTOP-QOGBL7D6"
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)

### new method

# define the keras model
model = Sequential()
model.add(Dense(20, input_dim=41, activation='relu'))
model.add(Dense(24, activation='relu'))
model.add(Dense(12, activation='relu'))
model.add(Dense(12, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
# compile the keras model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
# fit the keras model on the dataset
model.fit(X_train, Y_train, epochs=100, batch_size=10)

_, accuracy = model.evaluate(X_train, Y_train)

import types
import tempfile
import keras.models

def make_keras_picklable():
    def __getstate__(self):
        model_str = ""
        with tempfile.NamedTemporaryFile(suffix='.hdf5', delete=True) as fd:
            keras.models.save_model(self, fd.name, overwrite=True)
            model_str = fd.read()
        d = { 'model_str': model_str }
        return d

    def __setstate__(self, state):
        with tempfile.NamedTemporaryFile(suffix='.hdf5', delete=True) as fd:
            fd.write(state['model_str'])
            fd.flush()
            model = keras.models.load_model(fd.name)
        self.__dict__ = model.__dict__


    cls = keras.models.Model
    cls.__getstate__ = __getstate__
    cls.__setstate__ = __setstate__

make_keras_picklable()

import pickle
# Dumping the model object to save it as model.pkl file
pickle.dump(model,open('model.pkl','wb+'))